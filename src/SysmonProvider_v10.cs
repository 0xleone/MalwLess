//---------------------------------------------------------------------
// <autogenerated>
//
//     Generated by Message Compiler (mc.exe)
//
//     Copyright (c) Microsoft Corporation. All Rights Reserved.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//---------------------------------------------------------------------

namespace Sysmon_v10.Namespace
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Diagnostics;
    using System.Diagnostics.Eventing;
    using Microsoft.Win32;
    using System.Runtime.InteropServices;
    using System.Security.Principal;

    public static class SYSMON_PROVIDER_V10
    {
        //
        // Provider "Microsoft-Windows-Sysmon" event count = 23
        //

        internal static EventProviderVersionTwo m_provider = new EventProviderVersionTwo(new Guid("5770385f-c22a-43e0-bf4c-06f5698ffbd9"));
        //
        // Task :  eventGUIDs
        //

        //
        // Event Descriptors
        //
        private static EventDescriptor ProcessCreate_rule_ProcessCreate__V5;
        private static EventDescriptor Filecreationtimechanged_rule_FileCreateTime__V4;
        private static EventDescriptor Networkconnectiondetected_rule_NetworkConnect__V5;
        private static EventDescriptor Sysmonservicestatechanged_V3;
        private static EventDescriptor Processterminated_rule_ProcessTerminate__V3;
        private static EventDescriptor Driverloaded_rule_DriverLoad__V3;
        private static EventDescriptor Imageloaded_rule_ImageLoad__V3;
        private static EventDescriptor CreateRemoteThreaddetected_rule_CreateRemoteThread__V2;
        private static EventDescriptor RawAccessReaddetected_rule_RawAccessRead__V2;
        private static EventDescriptor Processaccessed_rule_ProcessAccess__V3;
        private static EventDescriptor Filecreated_rule_FileCreate__V2;
        private static EventDescriptor Registryobjectaddedordeleted_rule_RegistryEvent__V2;
        private static EventDescriptor Registryvalueset_rule_RegistryEvent__V2;
        private static EventDescriptor Registryobjectrenamed_rule_RegistryEvent__V2;
        private static EventDescriptor Filestreamcreated_rule_FileCreateStreamHash__V2;
        private static EventDescriptor Sysmonconfigstatechanged_V3;
        private static EventDescriptor PipeCreated_rule_PipeEvent__V1;
        private static EventDescriptor PipeConnected_rule_PipeEvent__V1;
        private static EventDescriptor WmiEventFilteractivitydetected_rule_WmiEvent__V3;
        private static EventDescriptor WmiEventConsumeractivitydetected_rule_WmiEvent__V3;
        private static EventDescriptor WmiEventConsumerToFilteractivitydetected_rule_WmiEvent__V3;
        private static EventDescriptor Dnsquery_rule_DnsQuery__V5;
        private static EventDescriptor Errorreport_V3;

        static SYSMON_PROVIDER_V10()
        {
            unchecked
            {
                ProcessCreate_rule_ProcessCreate__V5 = new EventDescriptor(0x1, 0x5, 0x0, 0x4, 0x0, 0x1, (long)0x0);
                Filecreationtimechanged_rule_FileCreateTime__V4 = new EventDescriptor(0x2, 0x4, 0x0, 0x4, 0x0, 0x2, (long)0x0);
                Networkconnectiondetected_rule_NetworkConnect__V5 = new EventDescriptor(0x3, 0x5, 0x0, 0x4, 0x0, 0x3, (long)0x0);
                Sysmonservicestatechanged_V3 = new EventDescriptor(0x4, 0x3, 0x0, 0x4, 0x0, 0x4, (long)0x0);
                Processterminated_rule_ProcessTerminate__V3 = new EventDescriptor(0x5, 0x3, 0x0, 0x4, 0x0, 0x5, (long)0x0);
                Driverloaded_rule_DriverLoad__V3 = new EventDescriptor(0x6, 0x3, 0x0, 0x4, 0x0, 0x6, (long)0x0);
                Imageloaded_rule_ImageLoad__V3 = new EventDescriptor(0x7, 0x3, 0x0, 0x4, 0x0, 0x7, (long)0x0);
                CreateRemoteThreaddetected_rule_CreateRemoteThread__V2 = new EventDescriptor(0x8, 0x2, 0x0, 0x4, 0x0, 0x8, (long)0x0);
                RawAccessReaddetected_rule_RawAccessRead__V2 = new EventDescriptor(0x9, 0x2, 0x0, 0x4, 0x0, 0x9, (long)0x0);
                Processaccessed_rule_ProcessAccess__V3 = new EventDescriptor(0xa, 0x3, 0x0, 0x4, 0x0, 0xa, (long)0x0);
                Filecreated_rule_FileCreate__V2 = new EventDescriptor(0xb, 0x2, 0x0, 0x4, 0x0, 0xb, (long)0x0);
                Registryobjectaddedordeleted_rule_RegistryEvent__V2 = new EventDescriptor(0xc, 0x2, 0x0, 0x4, 0x0, 0xc, (long)0x0);
                Registryvalueset_rule_RegistryEvent__V2 = new EventDescriptor(0xd, 0x2, 0x0, 0x4, 0x0, 0xd, (long)0x0);
                Registryobjectrenamed_rule_RegistryEvent__V2 = new EventDescriptor(0xe, 0x2, 0x0, 0x4, 0x0, 0xe, (long)0x0);
                Filestreamcreated_rule_FileCreateStreamHash__V2 = new EventDescriptor(0xf, 0x2, 0x0, 0x4, 0x0, 0xf, (long)0x0);
                Sysmonconfigstatechanged_V3 = new EventDescriptor(0x10, 0x3, 0x0, 0x4, 0x0, 0x10, (long)0x0);
                PipeCreated_rule_PipeEvent__V1 = new EventDescriptor(0x11, 0x1, 0x0, 0x4, 0x0, 0x11, (long)0x0);
                PipeConnected_rule_PipeEvent__V1 = new EventDescriptor(0x12, 0x1, 0x0, 0x4, 0x0, 0x12, (long)0x0);
                WmiEventFilteractivitydetected_rule_WmiEvent__V3 = new EventDescriptor(0x13, 0x3, 0x0, 0x4, 0x0, 0x13, (long)0x0);
                WmiEventConsumeractivitydetected_rule_WmiEvent__V3 = new EventDescriptor(0x14, 0x3, 0x0, 0x4, 0x0, 0x14, (long)0x0);
                WmiEventConsumerToFilteractivitydetected_rule_WmiEvent__V3 = new EventDescriptor(0x15, 0x3, 0x0, 0x4, 0x0, 0x15, (long)0x0);
                Dnsquery_rule_DnsQuery__V5 = new EventDescriptor(0x16, 0x5, 0x0, 0x4, 0x0, 0x16, (long)0x0);
                Errorreport_V3 = new EventDescriptor(0xff, 0x3, 0x0, 0x2, 0x0, 0xff, (long)0x0);
            }
        }

        //
        // Event method for ProcessCreate_rule_ProcessCreate__V5
        //
        public static bool EventWriteProcessCreate_rule_ProcessCreate__V5(string RuleName, string UtcTime, Guid ProcessGuid, uint ProcessId, string Image, string FileVersion, string Description, string Product, string Company, string OriginalFileName, string CommandLine, string CurrentDirectory, string User, Guid LogonGuid, long LogonId, uint TerminalSessionId, string IntegrityLevel, string Hashes, Guid ParentProcessGuid, uint ParentProcessId, string ParentImage, string ParentCommandLine)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateProcessCreate_rule_ProcessCreate_Args_V5(ref ProcessCreate_rule_ProcessCreate__V5, RuleName, UtcTime, ProcessGuid, ProcessId, Image, FileVersion, Description, Product, Company, OriginalFileName, CommandLine, CurrentDirectory, User, LogonGuid, LogonId, TerminalSessionId, IntegrityLevel, Hashes, ParentProcessGuid, ParentProcessId, ParentImage, ParentCommandLine);
        }

        //
        // Event method for Filecreationtimechanged_rule_FileCreateTime__V4
        //
        public static bool EventWriteFilecreationtimechanged_rule_FileCreateTime__V4(string RuleName, string UtcTime, Guid ProcessGuid, uint ProcessId, string Image, string TargetFilename, string CreationUtcTime, string PreviousCreationUtcTime)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateFilecreationtimechanged_rule_FileCreateTime_Args_V4(ref Filecreationtimechanged_rule_FileCreateTime__V4, RuleName, UtcTime, ProcessGuid, ProcessId, Image, TargetFilename, CreationUtcTime, PreviousCreationUtcTime);
        }

        //
        // Event method for Networkconnectiondetected_rule_NetworkConnect__V5
        //
        public static bool EventWriteNetworkconnectiondetected_rule_NetworkConnect__V5(string RuleName, string UtcTime, Guid ProcessGuid, uint ProcessId, string Image, string User, string Protocol, bool Initiated, bool SourceIsIpv6, string SourceIp, string SourceHostname, ushort SourcePort, string SourcePortName, bool DestinationIsIpv6, string DestinationIp, string DestinationHostname, ushort DestinationPort, string DestinationPortName)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateNetworkconnectiondetected_rule_NetworkConnect_Args_V5(ref Networkconnectiondetected_rule_NetworkConnect__V5, RuleName, UtcTime, ProcessGuid, ProcessId, Image, User, Protocol, Initiated, SourceIsIpv6, SourceIp, SourceHostname, SourcePort, SourcePortName, DestinationIsIpv6, DestinationIp, DestinationHostname, DestinationPort, DestinationPortName);
        }

        //
        // Event method for Sysmonservicestatechanged_V3
        //
        public static bool EventWriteSysmonservicestatechanged_V3(string UtcTime, string State, string Version, string SchemaVersion)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateSysmonservicestatechangedArgs_V3(ref Sysmonservicestatechanged_V3, UtcTime, State, Version, SchemaVersion);
        }

        //
        // Event method for Processterminated_rule_ProcessTerminate__V3
        //
        public static bool EventWriteProcessterminated_rule_ProcessTerminate__V3(string RuleName, string UtcTime, Guid ProcessGuid, uint ProcessId, string Image)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateProcessterminated_rule_ProcessTerminate_Args_V3(ref Processterminated_rule_ProcessTerminate__V3, RuleName, UtcTime, ProcessGuid, ProcessId, Image);
        }

        //
        // Event method for Driverloaded_rule_DriverLoad__V3
        //
        public static bool EventWriteDriverloaded_rule_DriverLoad__V3(string RuleName, string UtcTime, string ImageLoaded, string Hashes, string Signed, string Signature, string SignatureStatus)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateDriverloaded_rule_DriverLoad_Args_V3(ref Driverloaded_rule_DriverLoad__V3, RuleName, UtcTime, ImageLoaded, Hashes, Signed, Signature, SignatureStatus);
        }

        //
        // Event method for Imageloaded_rule_ImageLoad__V3
        //
        public static bool EventWriteImageloaded_rule_ImageLoad__V3(string RuleName, string UtcTime, Guid ProcessGuid, uint ProcessId, string Image, string ImageLoaded, string FileVersion, string Description, string Product, string Company, string OriginalFileName, string Hashes, string Signed, string Signature, string SignatureStatus)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateImageloaded_rule_ImageLoad_Args_V3(ref Imageloaded_rule_ImageLoad__V3, RuleName, UtcTime, ProcessGuid, ProcessId, Image, ImageLoaded, FileVersion, Description, Product, Company, OriginalFileName, Hashes, Signed, Signature, SignatureStatus);
        }

        //
        // Event method for CreateRemoteThreaddetected_rule_CreateRemoteThread__V2
        //
        public static bool EventWriteCreateRemoteThreaddetected_rule_CreateRemoteThread__V2(string RuleName, string UtcTime, Guid SourceProcessGuid, uint SourceProcessId, string SourceImage, Guid TargetProcessGuid, uint TargetProcessId, string TargetImage, uint NewThreadId, string StartAddress, string StartModule, string StartFunction)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateCreateRemoteThreaddetected_rule_CreateRemoteThread_Args_V2(ref CreateRemoteThreaddetected_rule_CreateRemoteThread__V2, RuleName, UtcTime, SourceProcessGuid, SourceProcessId, SourceImage, TargetProcessGuid, TargetProcessId, TargetImage, NewThreadId, StartAddress, StartModule, StartFunction);
        }

        //
        // Event method for RawAccessReaddetected_rule_RawAccessRead__V2
        //
        public static bool EventWriteRawAccessReaddetected_rule_RawAccessRead__V2(string RuleName, string UtcTime, Guid ProcessGuid, uint ProcessId, string Image, string Device)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateRawAccessReaddetected_rule_RawAccessRead_Args_V2(ref RawAccessReaddetected_rule_RawAccessRead__V2, RuleName, UtcTime, ProcessGuid, ProcessId, Image, Device);
        }

        //
        // Event method for Processaccessed_rule_ProcessAccess__V3
        //
        public static bool EventWriteProcessaccessed_rule_ProcessAccess__V3(string RuleName, string UtcTime, Guid SourceProcessGUID, uint SourceProcessId, uint SourceThreadId, string SourceImage, Guid TargetProcessGUID, uint TargetProcessId, string TargetImage, int GrantedAccess, string CallTrace)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateProcessaccessed_rule_ProcessAccess_Args_V3(ref Processaccessed_rule_ProcessAccess__V3, RuleName, UtcTime, SourceProcessGUID, SourceProcessId, SourceThreadId, SourceImage, TargetProcessGUID, TargetProcessId, TargetImage, GrantedAccess, CallTrace);
        }

        //
        // Event method for Filecreated_rule_FileCreate__V2
        //
        public static bool EventWriteFilecreated_rule_FileCreate__V2(string RuleName, string UtcTime, Guid ProcessGuid, uint ProcessId, string Image, string TargetFilename, string CreationUtcTime)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateFilecreated_rule_FileCreate_Args_V2(ref Filecreated_rule_FileCreate__V2, RuleName, UtcTime, ProcessGuid, ProcessId, Image, TargetFilename, CreationUtcTime);
        }

        //
        // Event method for Registryobjectaddedordeleted_rule_RegistryEvent__V2
        //
        public static bool EventWriteRegistryobjectaddedordeleted_rule_RegistryEvent__V2(string RuleName, string EventType, string UtcTime, Guid ProcessGuid, uint ProcessId, string Image, string TargetObject)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateRegistryobjectaddedordeleted_rule_RegistryEvent_Args_V2(ref Registryobjectaddedordeleted_rule_RegistryEvent__V2, RuleName, EventType, UtcTime, ProcessGuid, ProcessId, Image, TargetObject);
        }

        //
        // Event method for Registryvalueset_rule_RegistryEvent__V2
        //
        public static bool EventWriteRegistryvalueset_rule_RegistryEvent__V2(string RuleName, string EventType, string UtcTime, Guid ProcessGuid, uint ProcessId, string Image, string TargetObject, string Details)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateRegistryvalueset_rule_RegistryEvent_Args_V2(ref Registryvalueset_rule_RegistryEvent__V2, RuleName, EventType, UtcTime, ProcessGuid, ProcessId, Image, TargetObject, Details);
        }

        //
        // Event method for Registryobjectrenamed_rule_RegistryEvent__V2
        //
        public static bool EventWriteRegistryobjectrenamed_rule_RegistryEvent__V2(string RuleName, string EventType, string UtcTime, Guid ProcessGuid, uint ProcessId, string Image, string TargetObject, string NewName)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateRegistryobjectrenamed_rule_RegistryEvent_Args_V2(ref Registryobjectrenamed_rule_RegistryEvent__V2, RuleName, EventType, UtcTime, ProcessGuid, ProcessId, Image, TargetObject, NewName);
        }

        //
        // Event method for Filestreamcreated_rule_FileCreateStreamHash__V2
        //
        public static bool EventWriteFilestreamcreated_rule_FileCreateStreamHash__V2(string RuleName, string UtcTime, Guid ProcessGuid, uint ProcessId, string Image, string TargetFilename, string CreationUtcTime, string Hash)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateFilestreamcreated_rule_FileCreateStreamHash_Args_V2(ref Filestreamcreated_rule_FileCreateStreamHash__V2, RuleName, UtcTime, ProcessGuid, ProcessId, Image, TargetFilename, CreationUtcTime, Hash);
        }

        //
        // Event method for Sysmonconfigstatechanged_V3
        //
        public static bool EventWriteSysmonconfigstatechanged_V3(string UtcTime, string Configuration, string ConfigurationFileHash)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateSysmonconfigstatechangedArgs_V3(ref Sysmonconfigstatechanged_V3, UtcTime, Configuration, ConfigurationFileHash);
        }

        //
        // Event method for PipeCreated_rule_PipeEvent__V1
        //
        public static bool EventWritePipeCreated_rule_PipeEvent__V1(string RuleName, string EventType, string UtcTime, Guid ProcessGuid, uint ProcessId, string PipeName, string Image)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplatePipeCreated_rule_PipeEvent_Args_V1(ref PipeCreated_rule_PipeEvent__V1, RuleName, EventType, UtcTime, ProcessGuid, ProcessId, PipeName, Image);
        }

        //
        // Event method for PipeConnected_rule_PipeEvent__V1
        //
        public static bool EventWritePipeConnected_rule_PipeEvent__V1(string RuleName, string EventType, string UtcTime, Guid ProcessGuid, uint ProcessId, string PipeName, string Image)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplatePipeCreated_rule_PipeEvent_Args_V1(ref PipeConnected_rule_PipeEvent__V1, RuleName, EventType, UtcTime, ProcessGuid, ProcessId, PipeName, Image);
        }

        //
        // Event method for WmiEventFilteractivitydetected_rule_WmiEvent__V3
        //
        public static bool EventWriteWmiEventFilteractivitydetected_rule_WmiEvent__V3(string RuleName, string EventType, string UtcTime, string Operation, string User, string EventNamespace, string Name, string Query)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateWmiEventFilteractivitydetected_rule_WmiEvent_Args_V3(ref WmiEventFilteractivitydetected_rule_WmiEvent__V3, RuleName, EventType, UtcTime, Operation, User, EventNamespace, Name, Query);
        }

        //
        // Event method for WmiEventConsumeractivitydetected_rule_WmiEvent__V3
        //
        public static bool EventWriteWmiEventConsumeractivitydetected_rule_WmiEvent__V3(string RuleName, string EventType, string UtcTime, string Operation, string User, string Name, string Type, string Destination)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateWmiEventConsumeractivitydetected_rule_WmiEvent_Args_V3(ref WmiEventConsumeractivitydetected_rule_WmiEvent__V3, RuleName, EventType, UtcTime, Operation, User, Name, Type, Destination);
        }

        //
        // Event method for WmiEventConsumerToFilteractivitydetected_rule_WmiEvent__V3
        //
        public static bool EventWriteWmiEventConsumerToFilteractivitydetected_rule_WmiEvent__V3(string RuleName, string EventType, string UtcTime, string Operation, string User, string Consumer, string Filter)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateWmiEventConsumerToFilteractivitydetected_rule_WmiEvent_Args_V3(ref WmiEventConsumerToFilteractivitydetected_rule_WmiEvent__V3, RuleName, EventType, UtcTime, Operation, User, Consumer, Filter);
        }

        //
        // Event method for Dnsquery_rule_DnsQuery__V5
        //
        public static bool EventWriteDnsquery_rule_DnsQuery__V5(string RuleName, string UtcTime, Guid ProcessGuid, uint ProcessId, string QueryName, string QueryStatus, string QueryResults, string Image)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateDnsquery_rule_DnsQuery_Args_V5(ref Dnsquery_rule_DnsQuery__V5, RuleName, UtcTime, ProcessGuid, ProcessId, QueryName, QueryStatus, QueryResults, Image);
        }

        //
        // Event method for Errorreport_V3
        //
        public static bool EventWriteErrorreport_V3(string UtcTime, string ID, string Description)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateErrorreportArgs_V3(ref Errorreport_V3, UtcTime, ID, Description);
        }
    }

    internal class EventProviderVersionTwo : EventProvider
    {
         internal EventProviderVersionTwo(Guid id)
                : base(id)
         {}

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        private struct EventData
        {
            [FieldOffset(0)]
            internal UInt64 DataPointer;
            [FieldOffset(8)]
            internal uint Size;
            [FieldOffset(12)]
            internal int Reserved;
        }

        internal unsafe bool TemplateCreateRemoteThreaddetected_rule_CreateRemoteThread_Args_V2(
            ref EventDescriptor eventDescriptor,
            string RuleName,
            string UtcTime,
            Guid SourceProcessGuid,
            uint SourceProcessId,
            string SourceImage,
            Guid TargetProcessGuid,
            uint TargetProcessId,
            string TargetImage,
            uint NewThreadId,
            string StartAddress,
            string StartModule,
            string StartFunction
            )
        {
            int argumentCount = 12;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[0].Size = (uint)(RuleName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[1].Size = (uint)(UtcTime.Length + 1)*sizeof(char);

                userDataPtr[2].DataPointer = (UInt64)(&SourceProcessGuid);
                userDataPtr[2].Size = (uint)(sizeof(Guid)  );

                userDataPtr[3].DataPointer = (UInt64)(&SourceProcessId);
                userDataPtr[3].Size = (uint)(sizeof(int)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[4].Size = (uint)(SourceImage.Length + 1)*sizeof(char);

                userDataPtr[5].DataPointer = (UInt64)(&TargetProcessGuid);
                userDataPtr[5].Size = (uint)(sizeof(Guid)  );

                userDataPtr[6].DataPointer = (UInt64)(&TargetProcessId);
                userDataPtr[6].Size = (uint)(sizeof(int)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[7].Size = (uint)(TargetImage.Length + 1)*sizeof(char);

                userDataPtr[8].DataPointer = (UInt64)(&NewThreadId);
                userDataPtr[8].Size = (uint)(sizeof(int)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[9].Size = (uint)(StartAddress.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[10].Size = (uint)(StartModule.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[11].Size = (uint)(StartFunction.Length + 1)*sizeof(char);

                fixed (char* a0 = RuleName, a1 = UtcTime, a2 = SourceImage, a3 = TargetImage, a4 = StartAddress, a5 = StartModule, a6 = StartFunction)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[4].DataPointer = (ulong)a2;
                    userDataPtr[7].DataPointer = (ulong)a3;
                    userDataPtr[9].DataPointer = (ulong)a4;
                    userDataPtr[10].DataPointer = (ulong)a5;
                    userDataPtr[11].DataPointer = (ulong)a6;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }

        internal unsafe bool TemplateDnsquery_rule_DnsQuery_Args_V5(
            ref EventDescriptor eventDescriptor,
            string RuleName,
            string UtcTime,
            Guid ProcessGuid,
            uint ProcessId,
            string QueryName,
            string QueryStatus,
            string QueryResults,
            string Image
            )
        {
            int argumentCount = 8;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[0].Size = (uint)(RuleName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[1].Size = (uint)(UtcTime.Length + 1)*sizeof(char);

                userDataPtr[2].DataPointer = (UInt64)(&ProcessGuid);
                userDataPtr[2].Size = (uint)(sizeof(Guid)  );

                userDataPtr[3].DataPointer = (UInt64)(&ProcessId);
                userDataPtr[3].Size = (uint)(sizeof(int)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[4].Size = (uint)(QueryName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[5].Size = (uint)(QueryStatus.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[6].Size = (uint)(QueryResults.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[7].Size = (uint)(Image.Length + 1)*sizeof(char);

                fixed (char* a0 = RuleName, a1 = UtcTime, a2 = QueryName, a3 = QueryStatus, a4 = QueryResults, a5 = Image)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[4].DataPointer = (ulong)a2;
                    userDataPtr[5].DataPointer = (ulong)a3;
                    userDataPtr[6].DataPointer = (ulong)a4;
                    userDataPtr[7].DataPointer = (ulong)a5;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }

        internal unsafe bool TemplateDriverloaded_rule_DriverLoad_Args_V3(
            ref EventDescriptor eventDescriptor,
            string RuleName,
            string UtcTime,
            string ImageLoaded,
            string Hashes,
            string Signed,
            string Signature,
            string SignatureStatus
            )
        {
            int argumentCount = 7;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[0].Size = (uint)(RuleName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[1].Size = (uint)(UtcTime.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[2].Size = (uint)(ImageLoaded.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[3].Size = (uint)(Hashes.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[4].Size = (uint)(Signed.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[5].Size = (uint)(Signature.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[6].Size = (uint)(SignatureStatus.Length + 1)*sizeof(char);

                fixed (char* a0 = RuleName, a1 = UtcTime, a2 = ImageLoaded, a3 = Hashes, a4 = Signed, a5 = Signature, a6 = SignatureStatus)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[2].DataPointer = (ulong)a2;
                    userDataPtr[3].DataPointer = (ulong)a3;
                    userDataPtr[4].DataPointer = (ulong)a4;
                    userDataPtr[5].DataPointer = (ulong)a5;
                    userDataPtr[6].DataPointer = (ulong)a6;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }

        internal unsafe bool TemplateErrorreportArgs_V3(
            ref EventDescriptor eventDescriptor,
            string UtcTime,
            string ID,
            string Description
            )
        {
            int argumentCount = 3;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[0].Size = (uint)(UtcTime.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[1].Size = (uint)(ID.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[2].Size = (uint)(Description.Length + 1)*sizeof(char);

                fixed (char* a0 = UtcTime, a1 = ID, a2 = Description)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[2].DataPointer = (ulong)a2;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }

        internal unsafe bool TemplateFilecreated_rule_FileCreate_Args_V2(
            ref EventDescriptor eventDescriptor,
            string RuleName,
            string UtcTime,
            Guid ProcessGuid,
            uint ProcessId,
            string Image,
            string TargetFilename,
            string CreationUtcTime
            )
        {
            int argumentCount = 7;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[0].Size = (uint)(RuleName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[1].Size = (uint)(UtcTime.Length + 1)*sizeof(char);

                userDataPtr[2].DataPointer = (UInt64)(&ProcessGuid);
                userDataPtr[2].Size = (uint)(sizeof(Guid)  );

                userDataPtr[3].DataPointer = (UInt64)(&ProcessId);
                userDataPtr[3].Size = (uint)(sizeof(int)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[4].Size = (uint)(Image.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[5].Size = (uint)(TargetFilename.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[6].Size = (uint)(CreationUtcTime.Length + 1)*sizeof(char);

                fixed (char* a0 = RuleName, a1 = UtcTime, a2 = Image, a3 = TargetFilename, a4 = CreationUtcTime)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[4].DataPointer = (ulong)a2;
                    userDataPtr[5].DataPointer = (ulong)a3;
                    userDataPtr[6].DataPointer = (ulong)a4;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }

        internal unsafe bool TemplateFilecreationtimechanged_rule_FileCreateTime_Args_V4(
            ref EventDescriptor eventDescriptor,
            string RuleName,
            string UtcTime,
            Guid ProcessGuid,
            uint ProcessId,
            string Image,
            string TargetFilename,
            string CreationUtcTime,
            string PreviousCreationUtcTime
            )
        {
            int argumentCount = 8;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[0].Size = (uint)(RuleName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[1].Size = (uint)(UtcTime.Length + 1)*sizeof(char);

                userDataPtr[2].DataPointer = (UInt64)(&ProcessGuid);
                userDataPtr[2].Size = (uint)(sizeof(Guid)  );

                userDataPtr[3].DataPointer = (UInt64)(&ProcessId);
                userDataPtr[3].Size = (uint)(sizeof(int)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[4].Size = (uint)(Image.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[5].Size = (uint)(TargetFilename.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[6].Size = (uint)(CreationUtcTime.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[7].Size = (uint)(PreviousCreationUtcTime.Length + 1)*sizeof(char);

                fixed (char* a0 = RuleName, a1 = UtcTime, a2 = Image, a3 = TargetFilename, a4 = CreationUtcTime, a5 = PreviousCreationUtcTime)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[4].DataPointer = (ulong)a2;
                    userDataPtr[5].DataPointer = (ulong)a3;
                    userDataPtr[6].DataPointer = (ulong)a4;
                    userDataPtr[7].DataPointer = (ulong)a5;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }

        internal unsafe bool TemplateFilestreamcreated_rule_FileCreateStreamHash_Args_V2(
            ref EventDescriptor eventDescriptor,
            string RuleName,
            string UtcTime,
            Guid ProcessGuid,
            uint ProcessId,
            string Image,
            string TargetFilename,
            string CreationUtcTime,
            string Hash
            )
        {
            int argumentCount = 8;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[0].Size = (uint)(RuleName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[1].Size = (uint)(UtcTime.Length + 1)*sizeof(char);

                userDataPtr[2].DataPointer = (UInt64)(&ProcessGuid);
                userDataPtr[2].Size = (uint)(sizeof(Guid)  );

                userDataPtr[3].DataPointer = (UInt64)(&ProcessId);
                userDataPtr[3].Size = (uint)(sizeof(int)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[4].Size = (uint)(Image.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[5].Size = (uint)(TargetFilename.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[6].Size = (uint)(CreationUtcTime.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[7].Size = (uint)(Hash.Length + 1)*sizeof(char);

                fixed (char* a0 = RuleName, a1 = UtcTime, a2 = Image, a3 = TargetFilename, a4 = CreationUtcTime, a5 = Hash)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[4].DataPointer = (ulong)a2;
                    userDataPtr[5].DataPointer = (ulong)a3;
                    userDataPtr[6].DataPointer = (ulong)a4;
                    userDataPtr[7].DataPointer = (ulong)a5;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }

        internal unsafe bool TemplateImageloaded_rule_ImageLoad_Args_V3(
            ref EventDescriptor eventDescriptor,
            string RuleName,
            string UtcTime,
            Guid ProcessGuid,
            uint ProcessId,
            string Image,
            string ImageLoaded,
            string FileVersion,
            string Description,
            string Product,
            string Company,
            string OriginalFileName,
            string Hashes,
            string Signed,
            string Signature,
            string SignatureStatus
            )
        {
            int argumentCount = 15;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[0].Size = (uint)(RuleName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[1].Size = (uint)(UtcTime.Length + 1)*sizeof(char);

                userDataPtr[2].DataPointer = (UInt64)(&ProcessGuid);
                userDataPtr[2].Size = (uint)(sizeof(Guid)  );

                userDataPtr[3].DataPointer = (UInt64)(&ProcessId);
                userDataPtr[3].Size = (uint)(sizeof(int)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[4].Size = (uint)(Image.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[5].Size = (uint)(ImageLoaded.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[6].Size = (uint)(FileVersion.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[7].Size = (uint)(Description.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[8].Size = (uint)(Product.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[9].Size = (uint)(Company.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[10].Size = (uint)(OriginalFileName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[11].Size = (uint)(Hashes.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[12].Size = (uint)(Signed.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[13].Size = (uint)(Signature.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[14].Size = (uint)(SignatureStatus.Length + 1)*sizeof(char);

                fixed (char* a0 = RuleName, a1 = UtcTime, a2 = Image, a3 = ImageLoaded, a4 = FileVersion, a5 = Description, a6 = Product, a7 = Company, a8 = OriginalFileName, a9 = Hashes, a10 = Signed, a11 = Signature, a12 = SignatureStatus)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[4].DataPointer = (ulong)a2;
                    userDataPtr[5].DataPointer = (ulong)a3;
                    userDataPtr[6].DataPointer = (ulong)a4;
                    userDataPtr[7].DataPointer = (ulong)a5;
                    userDataPtr[8].DataPointer = (ulong)a6;
                    userDataPtr[9].DataPointer = (ulong)a7;
                    userDataPtr[10].DataPointer = (ulong)a8;
                    userDataPtr[11].DataPointer = (ulong)a9;
                    userDataPtr[12].DataPointer = (ulong)a10;
                    userDataPtr[13].DataPointer = (ulong)a11;
                    userDataPtr[14].DataPointer = (ulong)a12;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }

        internal unsafe bool TemplateNetworkconnectiondetected_rule_NetworkConnect_Args_V5(
            ref EventDescriptor eventDescriptor,
            string RuleName,
            string UtcTime,
            Guid ProcessGuid,
            uint ProcessId,
            string Image,
            string User,
            string Protocol,
            bool Initiated,
            bool SourceIsIpv6,
            string SourceIp,
            string SourceHostname,
            ushort SourcePort,
            string SourcePortName,
            bool DestinationIsIpv6,
            string DestinationIp,
            string DestinationHostname,
            ushort DestinationPort,
            string DestinationPortName
            )
        {
            int argumentCount = 18;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[0].Size = (uint)(RuleName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[1].Size = (uint)(UtcTime.Length + 1)*sizeof(char);

                userDataPtr[2].DataPointer = (UInt64)(&ProcessGuid);
                userDataPtr[2].Size = (uint)(sizeof(Guid)  );

                userDataPtr[3].DataPointer = (UInt64)(&ProcessId);
                userDataPtr[3].Size = (uint)(sizeof(int)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[4].Size = (uint)(Image.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[5].Size = (uint)(User.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[6].Size = (uint)(Protocol.Length + 1)*sizeof(char);

                int InitiatedInt = Initiated ? 1 : 0;
                userDataPtr[7].DataPointer = (UInt64)(&InitiatedInt);
                userDataPtr[7].Size = (uint)(sizeof(int));

                int SourceIsIpv6Int = SourceIsIpv6 ? 1 : 0;
                userDataPtr[8].DataPointer = (UInt64)(&SourceIsIpv6Int);
                userDataPtr[8].Size = (uint)(sizeof(int));

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[9].Size = (uint)(SourceIp.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[10].Size = (uint)(SourceHostname.Length + 1)*sizeof(char);

                userDataPtr[11].DataPointer = (UInt64)(&SourcePort);
                userDataPtr[11].Size = (uint)(sizeof(short)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[12].Size = (uint)(SourcePortName.Length + 1)*sizeof(char);

                int DestinationIsIpv6Int = DestinationIsIpv6 ? 1 : 0;
                userDataPtr[13].DataPointer = (UInt64)(&DestinationIsIpv6Int);
                userDataPtr[13].Size = (uint)(sizeof(int));

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[14].Size = (uint)(DestinationIp.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[15].Size = (uint)(DestinationHostname.Length + 1)*sizeof(char);

                userDataPtr[16].DataPointer = (UInt64)(&DestinationPort);
                userDataPtr[16].Size = (uint)(sizeof(short)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[17].Size = (uint)(DestinationPortName.Length + 1)*sizeof(char);

                fixed (char* a0 = RuleName, a1 = UtcTime, a2 = Image, a3 = User, a4 = Protocol, a5 = SourceIp, a6 = SourceHostname, a7 = SourcePortName, a8 = DestinationIp, a9 = DestinationHostname, a10 = DestinationPortName)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[4].DataPointer = (ulong)a2;
                    userDataPtr[5].DataPointer = (ulong)a3;
                    userDataPtr[6].DataPointer = (ulong)a4;
                    userDataPtr[9].DataPointer = (ulong)a5;
                    userDataPtr[10].DataPointer = (ulong)a6;
                    userDataPtr[12].DataPointer = (ulong)a7;
                    userDataPtr[14].DataPointer = (ulong)a8;
                    userDataPtr[15].DataPointer = (ulong)a9;
                    userDataPtr[17].DataPointer = (ulong)a10;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }

        internal unsafe bool TemplatePipeCreated_rule_PipeEvent_Args_V1(
            ref EventDescriptor eventDescriptor,
            string RuleName,
            string EventType,
            string UtcTime,
            Guid ProcessGuid,
            uint ProcessId,
            string PipeName,
            string Image
            )
        {
            int argumentCount = 7;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[0].Size = (uint)(RuleName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[1].Size = (uint)(EventType.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[2].Size = (uint)(UtcTime.Length + 1)*sizeof(char);

                userDataPtr[3].DataPointer = (UInt64)(&ProcessGuid);
                userDataPtr[3].Size = (uint)(sizeof(Guid)  );

                userDataPtr[4].DataPointer = (UInt64)(&ProcessId);
                userDataPtr[4].Size = (uint)(sizeof(int)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[5].Size = (uint)(PipeName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[6].Size = (uint)(Image.Length + 1)*sizeof(char);

                fixed (char* a0 = RuleName, a1 = EventType, a2 = UtcTime, a3 = PipeName, a4 = Image)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[2].DataPointer = (ulong)a2;
                    userDataPtr[5].DataPointer = (ulong)a3;
                    userDataPtr[6].DataPointer = (ulong)a4;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }

        internal unsafe bool TemplateProcessCreate_rule_ProcessCreate_Args_V5(
            ref EventDescriptor eventDescriptor,
            string RuleName,
            string UtcTime,
            Guid ProcessGuid,
            uint ProcessId,
            string Image,
            string FileVersion,
            string Description,
            string Product,
            string Company,
            string OriginalFileName,
            string CommandLine,
            string CurrentDirectory,
            string User,
            Guid LogonGuid,
            long LogonId,
            uint TerminalSessionId,
            string IntegrityLevel,
            string Hashes,
            Guid ParentProcessGuid,
            uint ParentProcessId,
            string ParentImage,
            string ParentCommandLine
            )
        {
            int argumentCount = 22;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[0].Size = (uint)(RuleName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[1].Size = (uint)(UtcTime.Length + 1)*sizeof(char);

                userDataPtr[2].DataPointer = (UInt64)(&ProcessGuid);
                userDataPtr[2].Size = (uint)(sizeof(Guid)  );

                userDataPtr[3].DataPointer = (UInt64)(&ProcessId);
                userDataPtr[3].Size = (uint)(sizeof(int)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[4].Size = (uint)(Image.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[5].Size = (uint)(FileVersion.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[6].Size = (uint)(Description.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[7].Size = (uint)(Product.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[8].Size = (uint)(Company.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[9].Size = (uint)(OriginalFileName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[10].Size = (uint)(CommandLine.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[11].Size = (uint)(CurrentDirectory.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[12].Size = (uint)(User.Length + 1)*sizeof(char);

                userDataPtr[13].DataPointer = (UInt64)(&LogonGuid);
                userDataPtr[13].Size = (uint)(sizeof(Guid)  );

                userDataPtr[14].DataPointer = (UInt64)(&LogonId);
                userDataPtr[14].Size = (uint)(sizeof(long)  );

                userDataPtr[15].DataPointer = (UInt64)(&TerminalSessionId);
                userDataPtr[15].Size = (uint)(sizeof(int)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[16].Size = (uint)(IntegrityLevel.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[17].Size = (uint)(Hashes.Length + 1)*sizeof(char);

                userDataPtr[18].DataPointer = (UInt64)(&ParentProcessGuid);
                userDataPtr[18].Size = (uint)(sizeof(Guid)  );

                userDataPtr[19].DataPointer = (UInt64)(&ParentProcessId);
                userDataPtr[19].Size = (uint)(sizeof(int)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[20].Size = (uint)(ParentImage.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[21].Size = (uint)(ParentCommandLine.Length + 1)*sizeof(char);

                fixed (char* a0 = RuleName, a1 = UtcTime, a2 = Image, a3 = FileVersion, a4 = Description, a5 = Product, a6 = Company, a7 = OriginalFileName, a8 = CommandLine, a9 = CurrentDirectory, a10 = User, a11 = IntegrityLevel, a12 = Hashes, a13 = ParentImage, a14 = ParentCommandLine)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[4].DataPointer = (ulong)a2;
                    userDataPtr[5].DataPointer = (ulong)a3;
                    userDataPtr[6].DataPointer = (ulong)a4;
                    userDataPtr[7].DataPointer = (ulong)a5;
                    userDataPtr[8].DataPointer = (ulong)a6;
                    userDataPtr[9].DataPointer = (ulong)a7;
                    userDataPtr[10].DataPointer = (ulong)a8;
                    userDataPtr[11].DataPointer = (ulong)a9;
                    userDataPtr[12].DataPointer = (ulong)a10;
                    userDataPtr[16].DataPointer = (ulong)a11;
                    userDataPtr[17].DataPointer = (ulong)a12;
                    userDataPtr[20].DataPointer = (ulong)a13;
                    userDataPtr[21].DataPointer = (ulong)a14;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }

        internal unsafe bool TemplateProcessaccessed_rule_ProcessAccess_Args_V3(
            ref EventDescriptor eventDescriptor,
            string RuleName,
            string UtcTime,
            Guid SourceProcessGUID,
            uint SourceProcessId,
            uint SourceThreadId,
            string SourceImage,
            Guid TargetProcessGUID,
            uint TargetProcessId,
            string TargetImage,
            int GrantedAccess,
            string CallTrace
            )
        {
            int argumentCount = 11;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[0].Size = (uint)(RuleName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[1].Size = (uint)(UtcTime.Length + 1)*sizeof(char);

                userDataPtr[2].DataPointer = (UInt64)(&SourceProcessGUID);
                userDataPtr[2].Size = (uint)(sizeof(Guid)  );

                userDataPtr[3].DataPointer = (UInt64)(&SourceProcessId);
                userDataPtr[3].Size = (uint)(sizeof(int)  );

                userDataPtr[4].DataPointer = (UInt64)(&SourceThreadId);
                userDataPtr[4].Size = (uint)(sizeof(int)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[5].Size = (uint)(SourceImage.Length + 1)*sizeof(char);

                userDataPtr[6].DataPointer = (UInt64)(&TargetProcessGUID);
                userDataPtr[6].Size = (uint)(sizeof(Guid)  );

                userDataPtr[7].DataPointer = (UInt64)(&TargetProcessId);
                userDataPtr[7].Size = (uint)(sizeof(int)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[8].Size = (uint)(TargetImage.Length + 1)*sizeof(char);

                userDataPtr[9].DataPointer = (UInt64)(&GrantedAccess);
                userDataPtr[9].Size = (uint)(sizeof(int)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[10].Size = (uint)(CallTrace.Length + 1)*sizeof(char);

                fixed (char* a0 = RuleName, a1 = UtcTime, a2 = SourceImage, a3 = TargetImage, a4 = CallTrace)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[5].DataPointer = (ulong)a2;
                    userDataPtr[8].DataPointer = (ulong)a3;
                    userDataPtr[10].DataPointer = (ulong)a4;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }

        internal unsafe bool TemplateProcessterminated_rule_ProcessTerminate_Args_V3(
            ref EventDescriptor eventDescriptor,
            string RuleName,
            string UtcTime,
            Guid ProcessGuid,
            uint ProcessId,
            string Image
            )
        {
            int argumentCount = 5;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[0].Size = (uint)(RuleName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[1].Size = (uint)(UtcTime.Length + 1)*sizeof(char);

                userDataPtr[2].DataPointer = (UInt64)(&ProcessGuid);
                userDataPtr[2].Size = (uint)(sizeof(Guid)  );

                userDataPtr[3].DataPointer = (UInt64)(&ProcessId);
                userDataPtr[3].Size = (uint)(sizeof(int)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[4].Size = (uint)(Image.Length + 1)*sizeof(char);

                fixed (char* a0 = RuleName, a1 = UtcTime, a2 = Image)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[4].DataPointer = (ulong)a2;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }

        internal unsafe bool TemplateRawAccessReaddetected_rule_RawAccessRead_Args_V2(
            ref EventDescriptor eventDescriptor,
            string RuleName,
            string UtcTime,
            Guid ProcessGuid,
            uint ProcessId,
            string Image,
            string Device
            )
        {
            int argumentCount = 6;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[0].Size = (uint)(RuleName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[1].Size = (uint)(UtcTime.Length + 1)*sizeof(char);

                userDataPtr[2].DataPointer = (UInt64)(&ProcessGuid);
                userDataPtr[2].Size = (uint)(sizeof(Guid)  );

                userDataPtr[3].DataPointer = (UInt64)(&ProcessId);
                userDataPtr[3].Size = (uint)(sizeof(int)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[4].Size = (uint)(Image.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[5].Size = (uint)(Device.Length + 1)*sizeof(char);

                fixed (char* a0 = RuleName, a1 = UtcTime, a2 = Image, a3 = Device)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[4].DataPointer = (ulong)a2;
                    userDataPtr[5].DataPointer = (ulong)a3;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }

        internal unsafe bool TemplateRegistryobjectaddedordeleted_rule_RegistryEvent_Args_V2(
            ref EventDescriptor eventDescriptor,
            string RuleName,
            string EventType,
            string UtcTime,
            Guid ProcessGuid,
            uint ProcessId,
            string Image,
            string TargetObject
            )
        {
            int argumentCount = 7;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[0].Size = (uint)(RuleName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[1].Size = (uint)(EventType.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[2].Size = (uint)(UtcTime.Length + 1)*sizeof(char);

                userDataPtr[3].DataPointer = (UInt64)(&ProcessGuid);
                userDataPtr[3].Size = (uint)(sizeof(Guid)  );

                userDataPtr[4].DataPointer = (UInt64)(&ProcessId);
                userDataPtr[4].Size = (uint)(sizeof(int)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[5].Size = (uint)(Image.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[6].Size = (uint)(TargetObject.Length + 1)*sizeof(char);

                fixed (char* a0 = RuleName, a1 = EventType, a2 = UtcTime, a3 = Image, a4 = TargetObject)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[2].DataPointer = (ulong)a2;
                    userDataPtr[5].DataPointer = (ulong)a3;
                    userDataPtr[6].DataPointer = (ulong)a4;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }

        internal unsafe bool TemplateRegistryobjectrenamed_rule_RegistryEvent_Args_V2(
            ref EventDescriptor eventDescriptor,
            string RuleName,
            string EventType,
            string UtcTime,
            Guid ProcessGuid,
            uint ProcessId,
            string Image,
            string TargetObject,
            string NewName
            )
        {
            int argumentCount = 8;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[0].Size = (uint)(RuleName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[1].Size = (uint)(EventType.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[2].Size = (uint)(UtcTime.Length + 1)*sizeof(char);

                userDataPtr[3].DataPointer = (UInt64)(&ProcessGuid);
                userDataPtr[3].Size = (uint)(sizeof(Guid)  );

                userDataPtr[4].DataPointer = (UInt64)(&ProcessId);
                userDataPtr[4].Size = (uint)(sizeof(int)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[5].Size = (uint)(Image.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[6].Size = (uint)(TargetObject.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[7].Size = (uint)(NewName.Length + 1)*sizeof(char);

                fixed (char* a0 = RuleName, a1 = EventType, a2 = UtcTime, a3 = Image, a4 = TargetObject, a5 = NewName)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[2].DataPointer = (ulong)a2;
                    userDataPtr[5].DataPointer = (ulong)a3;
                    userDataPtr[6].DataPointer = (ulong)a4;
                    userDataPtr[7].DataPointer = (ulong)a5;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }

        internal unsafe bool TemplateRegistryvalueset_rule_RegistryEvent_Args_V2(
            ref EventDescriptor eventDescriptor,
            string RuleName,
            string EventType,
            string UtcTime,
            Guid ProcessGuid,
            uint ProcessId,
            string Image,
            string TargetObject,
            string Details
            )
        {
            int argumentCount = 8;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[0].Size = (uint)(RuleName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[1].Size = (uint)(EventType.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[2].Size = (uint)(UtcTime.Length + 1)*sizeof(char);

                userDataPtr[3].DataPointer = (UInt64)(&ProcessGuid);
                userDataPtr[3].Size = (uint)(sizeof(Guid)  );

                userDataPtr[4].DataPointer = (UInt64)(&ProcessId);
                userDataPtr[4].Size = (uint)(sizeof(int)  );

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[5].Size = (uint)(Image.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[6].Size = (uint)(TargetObject.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[7].Size = (uint)(Details.Length + 1)*sizeof(char);

                fixed (char* a0 = RuleName, a1 = EventType, a2 = UtcTime, a3 = Image, a4 = TargetObject, a5 = Details)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[2].DataPointer = (ulong)a2;
                    userDataPtr[5].DataPointer = (ulong)a3;
                    userDataPtr[6].DataPointer = (ulong)a4;
                    userDataPtr[7].DataPointer = (ulong)a5;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }

        internal unsafe bool TemplateSysmonconfigstatechangedArgs_V3(
            ref EventDescriptor eventDescriptor,
            string UtcTime,
            string Configuration,
            string ConfigurationFileHash
            )
        {
            int argumentCount = 3;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[0].Size = (uint)(UtcTime.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[1].Size = (uint)(Configuration.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[2].Size = (uint)(ConfigurationFileHash.Length + 1)*sizeof(char);

                fixed (char* a0 = UtcTime, a1 = Configuration, a2 = ConfigurationFileHash)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[2].DataPointer = (ulong)a2;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }

        internal unsafe bool TemplateSysmonservicestatechangedArgs_V3(
            ref EventDescriptor eventDescriptor,
            string UtcTime,
            string State,
            string Version,
            string SchemaVersion
            )
        {
            int argumentCount = 4;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[0].Size = (uint)(UtcTime.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[1].Size = (uint)(State.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[2].Size = (uint)(Version.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[3].Size = (uint)(SchemaVersion.Length + 1)*sizeof(char);

                fixed (char* a0 = UtcTime, a1 = State, a2 = Version, a3 = SchemaVersion)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[2].DataPointer = (ulong)a2;
                    userDataPtr[3].DataPointer = (ulong)a3;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }

        internal unsafe bool TemplateWmiEventConsumerToFilteractivitydetected_rule_WmiEvent_Args_V3(
            ref EventDescriptor eventDescriptor,
            string RuleName,
            string EventType,
            string UtcTime,
            string Operation,
            string User,
            string Consumer,
            string Filter
            )
        {
            int argumentCount = 7;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[0].Size = (uint)(RuleName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[1].Size = (uint)(EventType.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[2].Size = (uint)(UtcTime.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[3].Size = (uint)(Operation.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[4].Size = (uint)(User.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[5].Size = (uint)(Consumer.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[6].Size = (uint)(Filter.Length + 1)*sizeof(char);

                fixed (char* a0 = RuleName, a1 = EventType, a2 = UtcTime, a3 = Operation, a4 = User, a5 = Consumer, a6 = Filter)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[2].DataPointer = (ulong)a2;
                    userDataPtr[3].DataPointer = (ulong)a3;
                    userDataPtr[4].DataPointer = (ulong)a4;
                    userDataPtr[5].DataPointer = (ulong)a5;
                    userDataPtr[6].DataPointer = (ulong)a6;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }

        internal unsafe bool TemplateWmiEventConsumeractivitydetected_rule_WmiEvent_Args_V3(
            ref EventDescriptor eventDescriptor,
            string RuleName,
            string EventType,
            string UtcTime,
            string Operation,
            string User,
            string Name,
            string Type,
            string Destination
            )
        {
            int argumentCount = 8;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[0].Size = (uint)(RuleName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[1].Size = (uint)(EventType.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[2].Size = (uint)(UtcTime.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[3].Size = (uint)(Operation.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[4].Size = (uint)(User.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[5].Size = (uint)(Name.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[6].Size = (uint)(Type.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[7].Size = (uint)(Destination.Length + 1)*sizeof(char);

                fixed (char* a0 = RuleName, a1 = EventType, a2 = UtcTime, a3 = Operation, a4 = User, a5 = Name, a6 = Type, a7 = Destination)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[2].DataPointer = (ulong)a2;
                    userDataPtr[3].DataPointer = (ulong)a3;
                    userDataPtr[4].DataPointer = (ulong)a4;
                    userDataPtr[5].DataPointer = (ulong)a5;
                    userDataPtr[6].DataPointer = (ulong)a6;
                    userDataPtr[7].DataPointer = (ulong)a7;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }

        internal unsafe bool TemplateWmiEventFilteractivitydetected_rule_WmiEvent_Args_V3(
            ref EventDescriptor eventDescriptor,
            string RuleName,
            string EventType,
            string UtcTime,
            string Operation,
            string User,
            string EventNamespace,
            string Name,
            string Query
            )
        {
            int argumentCount = 8;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[0].Size = (uint)(RuleName.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[1].Size = (uint)(EventType.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[2].Size = (uint)(UtcTime.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[3].Size = (uint)(Operation.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[4].Size = (uint)(User.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[5].Size = (uint)(EventNamespace.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[6].Size = (uint)(Name.Length + 1)*sizeof(char);

                // Value is a nul-terminated string (assume no embedded nuls):
                userDataPtr[7].Size = (uint)(Query.Length + 1)*sizeof(char);

                fixed (char* a0 = RuleName, a1 = EventType, a2 = UtcTime, a3 = Operation, a4 = User, a5 = EventNamespace, a6 = Name, a7 = Query)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[2].DataPointer = (ulong)a2;
                    userDataPtr[3].DataPointer = (ulong)a3;
                    userDataPtr[4].DataPointer = (ulong)a4;
                    userDataPtr[5].DataPointer = (ulong)a5;
                    userDataPtr[6].DataPointer = (ulong)a6;
                    userDataPtr[7].DataPointer = (ulong)a7;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }
    }
}
